{"version":3,"file":"static/js/656.0d2fcefa.chunk.js","mappings":"4KACA,QAAuB,2BAAvB,EAA0D,4BAA1D,EAA8F,4BAA9F,EAAkI,4BAAlI,EAAsK,4BAAtK,EAAwM,0B,0DCQjM,MAAMA,EAAeA,KAC1B,MAAMC,GAAWC,EAAAA,EAAAA,MAEXC,GAAgBC,EAAAA,EAAAA,IAAYC,EAAAA,IAC5BC,GAAYF,EAAAA,EAAAA,IAAYG,EAAAA,IAQxBC,GAASC,EAAAA,EAAAA,IAAO,CACpBC,MAAMC,EAAAA,EAAAA,MAASC,WACfC,OAAOF,EAAAA,EAAAA,MAASE,QAAQD,WACxBE,UAAUH,EAAAA,EAAAA,MAASI,IAAI,EAAG,gCAAgCH,aAG5D,OACEI,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,CACGZ,GACCa,EAAAA,OAAOC,QACyB,iBAA9Bd,EAAUe,gBACN,0DACA,8DAENlB,GAAiBmB,EAAAA,QAAQC,UAC3BC,EAAAA,EAAAA,KAACC,EAAAA,GAAM,CACLC,cAAe,CAAEhB,KAAM,GAAIG,MAAO,GAAIC,SAAU,IAChDa,SAvBeC,CAACC,EAAMC,KAAqB,IAAnB,UAAEC,GAAWD,EACzC7B,GAAS+B,EAAAA,EAAAA,IAAaH,IACtBE,IACA5B,GAAiBmB,EAAAA,QAAQW,OAAO,UAAU,EAqBtCC,iBAAkB1B,EAAOU,UAEzBF,EAAAA,EAAAA,MAACmB,EAAAA,GAAI,CAACC,UAAWC,EAASnB,SAAA,EACxBM,EAAAA,EAAAA,KAAA,MAAIY,UAAWC,EAAUnB,SAAC,+BAC1BM,EAAAA,EAAAA,KAAA,KAAGY,UAAWC,EAAUnB,SAAC,2BACzBF,EAAAA,EAAAA,MAAA,SAAOoB,UAAWC,EAAUnB,SAAA,CAAC,mBAE3BM,EAAAA,EAAAA,KAACc,EAAAA,GAAY,CAACC,UAAU,MAAM7B,KAAK,UACnCc,EAAAA,EAAAA,KAACgB,EAAAA,GAAK,CACJJ,UAAWC,EACXI,GAAG,QACHC,KAAK,OACLhC,KAAK,OACLiC,YAAY,kBAGhB3B,EAAAA,EAAAA,MAAA,SAAOoB,UAAWC,EAAUnB,SAAA,CAAC,oBAE3BM,EAAAA,EAAAA,KAACc,EAAAA,GAAY,CAACC,UAAU,MAAM7B,KAAK,WACnCc,EAAAA,EAAAA,KAACgB,EAAAA,GAAK,CACJJ,UAAWC,EACXI,GAAG,QACHC,KAAK,OACLhC,KAAK,QACLiC,YAAY,+BAGhB3B,EAAAA,EAAAA,MAAA,SAAOoB,UAAWC,EAAUnB,SAAA,CAAC,kBAE3BM,EAAAA,EAAAA,KAACc,EAAAA,GAAY,CAACC,UAAU,MAAM7B,KAAK,cACnCc,EAAAA,EAAAA,KAACgB,EAAAA,GAAK,CACJJ,UAAWC,EACXI,GAAG,QACHC,KAAK,OACLhC,KAAK,WACLiC,YAAY,sBAGhBnB,EAAAA,EAAAA,KAAA,UAAQY,UAAWC,EAASK,KAAK,SAAQxB,SAAC,oBAK7C,EC5EP,EAJiB0B,KACRpB,EAAAA,EAAAA,KAACxB,EAAY,G","sources":["webpack://miraplay_test_client/./src/components/RegisterForm/RegisterForm.module.css?a5d4","components/RegisterForm/RegisterForm.jsx","pages/Register/Register.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"form\":\"RegisterForm_form__q6MLe\",\"title\":\"RegisterForm_title__bmM74\",\"descr\":\"RegisterForm_descr__A8HPw\",\"label\":\"RegisterForm_label__i5fTL\",\"input\":\"RegisterForm_input__feKRS\",\"btn\":\"RegisterForm_btn__b07rb\"};","import { Formik, Form, Field, ErrorMessage } from 'formik';\r\nimport { object, string } from 'yup';\r\nimport css from './RegisterForm.module.css';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { registerUser } from 'redux/auth/authOperations';\r\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\r\nimport { Loading } from 'notiflix/build/notiflix-loading-aio';\r\nimport { getErrorUser, getIsLoadingUser } from 'redux/auth/authSelectors';\r\n\r\nexport const RegisterForm = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  const isUserLoading = useSelector(getIsLoadingUser);\r\n  const userError = useSelector(getErrorUser);\r\n\r\n  const handleSubmit = (values, { resetForm }) => {\r\n    dispatch(registerUser(values));\r\n    resetForm();\r\n    isUserLoading && Loading.circle('LOADING');\r\n  };\r\n\r\n  const schema = object({\r\n    name: string().required(),\r\n    email: string().email().required(),\r\n    password: string().min(6, ' Too Short! Minimum 6 symbol').required(),\r\n  });\r\n\r\n  return (\r\n    <>\r\n      {userError &&\r\n        Notify.failure(\r\n          userError.responseMessage === 'Email in use'\r\n            ? 'The user with this email already exists. Please log in.'\r\n            : 'Something went wrong please reload the page or try later.'\r\n        )}\r\n      {!isUserLoading && Loading.remove()}\r\n      <Formik\r\n        initialValues={{ name: '', email: '', password: '' }}\r\n        onSubmit={handleSubmit}\r\n        validationSchema={schema}\r\n      >\r\n        <Form className={css.form}>\r\n          <h1 className={css.title}>Experience new sensations</h1>\r\n          <p className={css.descr}>Register to see games</p>\r\n          <label className={css.label}>\r\n            Enter your name\r\n            <ErrorMessage component=\"div\" name=\"name\" />\r\n            <Field\r\n              className={css.input}\r\n              as=\"input\"\r\n              type=\"text\"\r\n              name=\"name\"\r\n              placeholder=\"your name\"\r\n            ></Field>\r\n          </label>\r\n          <label className={css.label}>\r\n            Enter your email\r\n            <ErrorMessage component=\"div\" name=\"email\" />\r\n            <Field\r\n              className={css.input}\r\n              as=\"input\"\r\n              type=\"mail\"\r\n              name=\"email\"\r\n              placeholder=\"youremail@miraplay.com\"\r\n            ></Field>\r\n          </label>\r\n          <label className={css.label}>\r\n            Enter password\r\n            <ErrorMessage component=\"div\" name=\"password\" />\r\n            <Field\r\n              className={css.input}\r\n              as=\"input\"\r\n              type=\"text\"\r\n              name=\"password\"\r\n              placeholder=\"your password\"\r\n            ></Field>\r\n          </label>\r\n          <button className={css.btn} type=\"submit\">\r\n            Register\r\n          </button>\r\n        </Form>\r\n      </Formik>\r\n    </>\r\n  );\r\n};\r\n","import { RegisterForm } from 'components/RegisterForm/RegisterForm';\r\n\r\nconst Register = () => {\r\n  return <RegisterForm />;\r\n};\r\n\r\nexport default Register;\r\n"],"names":["RegisterForm","dispatch","useDispatch","isUserLoading","useSelector","getIsLoadingUser","userError","getErrorUser","schema","object","name","string","required","email","password","min","_jsxs","_Fragment","children","Notify","failure","responseMessage","Loading","remove","_jsx","Formik","initialValues","onSubmit","handleSubmit","values","_ref","resetForm","registerUser","circle","validationSchema","Form","className","css","ErrorMessage","component","Field","as","type","placeholder","Register"],"sourceRoot":""}