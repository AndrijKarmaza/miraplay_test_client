{"version":3,"file":"static/js/963.a31184c9.chunk.js","mappings":"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","sources":["webpack://miraplay_test_client/./src/components/GamesList/GamesList.module.css?ef3b","redux/games/gamesSelectors.js","components/GamesList/GamesList.jsx","webpack://miraplay_test_client/./src/pages/Games/Games.module.css?c1b5","webpack://miraplay_test_client/./src/components/GenreList/GenreList.module.css?f8c7","components/GenreList/GenreList.jsx","webpack://miraplay_test_client/./src/components/Sort/Sort.module.css?d8cd","components/Sort/Sort.jsx","pages/Games/Games.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"games_list\":\"GamesList_games_list__DnUv5\",\"game_item\":\"GamesList_game_item__Rx2nA\",\"game_img\":\"GamesList_game_img__wpPkQ\",\"game_descr_box\":\"GamesList_game_descr_box__4RS5j\",\"game_header\":\"GamesList_game_header__2f+Gg\",\"game_descr\":\"GamesList_game_descr__p5ZVO\",\"game_genre_cont\":\"GamesList_game_genre_cont__5TcWf\",\"game_top\":\"GamesList_game_top__7RAp8\",\"game_genre\":\"GamesList_game_genre__iJrhX\",\"game_class\":\"GamesList_game_class__q5uQo\"};","export const selectGames = state => state.games.items;\r\n\r\nexport const selectCurrentPage = state => state.games.currentPage;\r\n\r\nexport const selectFreshGames = state => state.games.isFreshGamesFirst;\r\n\r\nexport const selectTotalGames = state => state.games.totalGames;\r\n\r\nexport const selectGenre = state => state.games.genre;\r\n\r\nexport const selectIsLoading = state => state.games.isLoading;\r\n\r\nexport const selectError = state => state.games.error;\r\n","import { useSelector } from 'react-redux';\r\nimport css from './GamesList.module.css';\r\nimport { selectGames } from 'redux/games/gamesSelectors';\r\n\r\nexport const GamesList = () => {\r\n  const games = useSelector(selectGames);\r\n\r\n  return (\r\n    <ul className={css.games_list}>\r\n      {games.length &&\r\n        games.map(\r\n          ({\r\n            _id,\r\n            systemGameName,\r\n            gameDescription,\r\n            gameImage,\r\n            genre,\r\n            inTop,\r\n            gameClass,\r\n          }) => (\r\n            <li className={css.game_item} key={_id}>\r\n              <img\r\n                className={css.game_img}\r\n                src={gameImage}\r\n                alt={systemGameName}\r\n                loading=\"lazy\"\r\n              />\r\n              <div className={css.game_descr_box}>\r\n                <p className={css.game_header}>{systemGameName}</p>\r\n                <p className={css.game_descr}>\r\n                  {gameDescription && gameDescription.slice(0, 115) + ' ...'}\r\n                </p>\r\n              </div>\r\n              <div className={css.game_genre_cont}>\r\n                {inTop && <p className={css.game_top}>TOP</p>}\r\n                <p className={css.game_genre}>{genre}</p>\r\n              </div>\r\n              {gameClass === 'STANDART' && (\r\n                <p className={css.game_class}>FREE</p>\r\n              )}\r\n            </li>\r\n          )\r\n        )}\r\n    </ul>\r\n  );\r\n};\r\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Games_container__UygIB\",\"header\":\"Games_header__Ga+La\",\"nav_container\":\"Games_nav_container__pumkZ\",\"btn_see_more\":\"Games_btn_see_more__+Rbol\"};","// extracted by mini-css-extract-plugin\nexport default {\"genre_list\":\"GenreList_genre_list__AVrY2\",\"genre_item\":\"GenreList_genre_item__7c9hM\",\"genre_item_active\":\"GenreList_genre_item_active__jQusO\"};","import { setGenre } from 'redux/games/gamesOperations';\r\nimport css from './GenreList.module.css';\r\nimport { useDispatch } from 'react-redux';\r\nimport { nanoid } from 'nanoid';\r\nimport { useSelector } from 'react-redux';\r\nimport { selectGenre } from 'redux/games/gamesSelectors';\r\n\r\nconst genres = [\r\n  'ALL',\r\n  'FREE',\r\n  'MOBA',\r\n  'SHOOTERS',\r\n  'LAUNCHERS',\r\n  'MMORPG',\r\n  'STRATEGY',\r\n  'FIGHTING',\r\n  'RACING',\r\n  'SURVIVAL',\r\n  'ONLINE',\r\n];\r\n\r\nconst GenreList = () => {\r\n  const dispatch = useDispatch();\r\n  const currGenre = useSelector(selectGenre);\r\n\r\n  function genreCheck(genre) {\r\n    if (currGenre === false && genre === 'ALL') {\r\n      return;\r\n    }\r\n    currGenre !== genre && dispatch(setGenre(genre));\r\n  }\r\n\r\n  return (\r\n    <ul className={css.genre_list}>\r\n      {genres.map(genre => (\r\n        <li\r\n          key={nanoid()}\r\n          className={\r\n            genre === currGenre || (genre === 'ALL' && currGenre === false)\r\n              ? css.genre_item_active\r\n              : css.genre_item\r\n          }\r\n          onClick={() => genreCheck(genre)}\r\n        >\r\n          {genre}\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default GenreList;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"sort_container\":\"Sort_sort_container__LSEr8\",\"title\":\"Sort_title__BtC+o\",\"main_category\":\"Sort_main_category__5sC4P\",\"category\":\"Sort_category__tVQ1Z\",\"icon\":\"Sort_icon__TX+wj\"};","import css from './Sort.module.css';\r\nimport { useSelector } from 'react-redux';\r\nimport { selectFreshGames } from 'redux/games/gamesSelectors';\r\nimport { setFreshGames } from 'redux/games/gamesOperations';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useState } from 'react';\r\nimport { FaCaretUp } from 'react-icons/fa';\r\nimport { FaCaretDown } from 'react-icons/fa';\r\n\r\nconst Sort = () => {\r\n  const dispatch = useDispatch();\r\n  const freshValue = useSelector(selectFreshGames);\r\n\r\n  const [isOpen, setIsOpen] = useState(false);\r\n\r\n  function onCategoryClick() {\r\n    setIsOpen(!isOpen);\r\n    dispatch(setFreshGames());\r\n  }\r\n\r\n  return (\r\n    <div className={css.sort_container}>\r\n      <p className={css.title}>Sort:</p>\r\n      <div>\r\n        <p className={css.main_category} onClick={() => setIsOpen(!isOpen)}>\r\n          {freshValue ? 'new first' : 'old first'}{' '}\r\n          {!isOpen ? (\r\n            <FaCaretDown className={css.icon} />\r\n          ) : (\r\n            <FaCaretUp className={css.icon} />\r\n          )}\r\n        </p>\r\n        {isOpen && (\r\n          <p className={css.category} onClick={() => onCategoryClick()}>\r\n            {!freshValue ? 'new first' : 'old first'}\r\n          </p>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Sort;\r\n","import { GamesList } from 'components/GamesList/GamesList';\r\nimport { useSelector } from 'react-redux';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useEffect } from 'react';\r\nimport { fetchGames } from 'redux/games/gamesOperations';\r\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\r\nimport { Loading } from 'notiflix/build/notiflix-loading-aio';\r\nimport {\r\n  selectError,\r\n  selectIsLoading,\r\n  selectGenre,\r\n  selectCurrentPage,\r\n  selectTotalGames,\r\n  selectFreshGames,\r\n} from 'redux/games/gamesSelectors';\r\nimport css from './Games.module.css';\r\nimport { setPage } from 'redux/games/gamesOperations';\r\nimport GenreList from 'components/GenreList/GenreList';\r\nimport Sort from 'components/Sort/Sort';\r\n\r\nconst Games = () => {\r\n  const dispatch = useDispatch();\r\n  const isLoading = useSelector(selectIsLoading);\r\n  const error = useSelector(selectError);\r\n  const genre = useSelector(selectGenre);\r\n  const page = useSelector(selectCurrentPage);\r\n  const totalGames = useSelector(selectTotalGames);\r\n  const isFreshGamesFirst = useSelector(selectFreshGames);\r\n\r\n  const gamesToShow = 9;\r\n\r\n  const reqBody = {\r\n    page,\r\n    isFreshGamesFirst,\r\n    genre,\r\n    gamesToShow,\r\n  };\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchGames(reqBody));\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [dispatch, page, genre, isFreshGamesFirst]);\r\n\r\n  return (\r\n    <section className={css.container}>\r\n      <h1 className={css.header}>All games</h1>\r\n      {isLoading && Loading.circle('LOADING')}\r\n      {!isLoading && Loading.remove()}\r\n      {error &&\r\n        Notify.failure('Something went wrong please try to reload page.')}\r\n      <>\r\n        <div className={css.nav_container}>\r\n          <GenreList />\r\n          <Sort />\r\n        </div>\r\n        <GamesList />\r\n        {page * gamesToShow < totalGames && (\r\n          <button\r\n            className={css.btn_see_more}\r\n            onClick={() => dispatch(setPage())}\r\n          >\r\n            Show more\r\n          </button>\r\n        )}\r\n      </>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Games;\r\n"],"names":["selectGames","state","games","items","selectCurrentPage","currentPage","selectFreshGames","isFreshGamesFirst","selectTotalGames","totalGames","selectGenre","genre","selectIsLoading","isLoading","selectError","error","GamesList","useSelector","_jsx","className","css","children","length","map","_ref","_id","systemGameName","gameDescription","gameImage","inTop","gameClass","_jsxs","src","alt","loading","slice","genres","GenreList","dispatch","useDispatch","currGenre","onClick","setGenre","genreCheck","nanoid","Sort","freshValue","isOpen","setIsOpen","useState","FaCaretUp","FaCaretDown","setFreshGames","Games","page","reqBody","gamesToShow","useEffect","fetchGames","Loading","circle","remove","Notify","failure","_Fragment","setPage"],"sourceRoot":""}